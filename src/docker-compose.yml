## AUTHOR : PIERO LOPEZ ROSAS

services:
  # Servicio para la base de datos MySQL
  db:
    image: mysql:8.0
    container_name: prestashop-db
    env_file:
      - .env // Docker Compose carga automáticamente todas las variables definidas en el archivo .env y las inyecta como variables de entorno dentro del contenedor.
        // Pero, eso no significa que esas variables se usen automáticamente en el servicio. Solo están disponibles si la imagen base o la aplicación las reconoce.
        // Por eso, en algunas imágenes ( como mysql o prestashop), se necesitan de variables específicas
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servicio para la aplicación PrestaShop
  prestashop:
    image: prestashop/prestashop:latest
    container_name: prestashop-app
    env_file:
      - .env
    environment:
      DB_SERVER: ${DB_SERVER}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    ports:
      - "8080:80"
    volumes:
      - prestashop_data:/var/www/html
    depends_on:
      db:
        condition: service_healthy

  # Servicio para phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: prestashop-phpmyadmin
    env_file:
      - .env
    environment:
      PMA_HOST: ${PMA_HOST}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "8081:80"
    depends_on:
      db:
        condition: service_healthy

volumes:
  db_data:
  prestashop_data:
